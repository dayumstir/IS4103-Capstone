// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING_EMAIL_VERIFICATION
  PENDING_PHONE_VERIFICATION
  ACTIVE
  SUSPENDED
}

model Customer {
  customer_id     String   @id @default(cuid())
  name            String
  profile_picture Bytes    @db.ByteA
  email           String   @unique
  password        String
  contact_number  String
  address         String
  date_of_birth   DateTime
  status          Status
  credit_score    Int      @default(0)
  credit_tier_id  String   @default("tier_1")

  // Relationships
  emailVerificationTokens EmailVerificationToken[]
  otps                    Otp[]
  passwordResetTokens     PasswordResetToken[]
  issues                  Issue[]
  vouchersAssigned        VoucherAssigned[]
}

// Utility Schemas
// Customer Sign Up Use Case: Store email verification tokens
model EmailVerificationToken {
  id    String @id @default(cuid())
  email String
  token String @unique

  expiresAt DateTime @default(now())
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 1 Customer to Many EmailVerificationTokens
  customer    Customer @relation(fields: [customer_id], references: [customer_id])
  customer_id String

  @@index([customer_id])
}

// Customer Sign Up Use Case: Store phone number OTPs
model Otp {
  id             String @id @default(cuid())
  contact_number String
  otp            String @unique

  expiresAt DateTime @default(now())
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer    Customer @relation(fields: [customer_id], references: [customer_id])
  customer_id String

  @@index([customer_id])
}

// Customer Logout Use Case: JWT Blacklisting
model TokenBlackList {
  id    String @id @default(cuid())
  token String @unique

  expiresAt DateTime
  createdAt DateTime @default(now())
}

// Customer Forget Password Use Case: Store PasswordResetTokens
model PasswordResetToken {
  id    String @id @default(cuid())
  email String
  token String @unique

  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer    Customer @relation(fields: [customer_id], references: [customer_id])
  customer_id String

  @@index([customer_id])
}


enum AdminType {
  SUPER
  NORMAL
  DEACTIVATED
  UNVERIFIED
  UNVERIFIED
}

model Admin {
  admin_id        String    @id @default(cuid())
  name            String
  profile_picture Bytes?    @db.ByteA
  email           String    @unique
  username        String    @unique
  password        String
  contact_number  String
  address         String
  date_of_birth   DateTime
  admin_type      AdminType

  // Relationships
  issues          Issue[]
  vouchersCreated Voucher[]
}


model Merchant {
  merchant_id     String @id @default(cuid())
  name            String
  email           String @unique
  password        String
  contact_number  String
  address         String
  qr_code         String
  status          Status
  profile_picture Bytes? @db.ByteA

  // Relationships
  emailVerificationTokens MerchantEmailVerificationToken[]
  issues                  Issue[]
}

// Merchant Sign Up Use Case: Store phone number OTPs
model MerchantOtp {
  id             String @id @default(cuid())
  contact_number String
  otp            String @unique

  expiresAt DateTime @default(now())
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Merchant Sign Up Use Case: Store email verification tokens
model MerchantEmailVerificationToken {
  id    String @id @default(cuid())
  email String
  token String

  expiresAt DateTime @default(now())
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 1 Merchant to Many EmailVerificationTokens
  merchant    Merchant @relation(fields: [merchant_id], references: [merchant_id])
  merchant_id String

  @@unique([email, token])
  @@index([merchant_id])
}


model Transaction {
  transaction_id      String   @id @default(cuid())
  amount              Decimal  @db.Decimal(10, 2)
  date                DateTime
  status              String
  customer_id         String
  merchant_id         String
  merchant_payment_id String
  installment_plan_id String
}

model InstalmentPlan {
  instalment_plan_id    String  @id @default(cuid())
  name                  String
  description           String
  number_of_instalments Int
  time_period           Int // in weeks
  interest_rate         Decimal @db.Decimal(5, 2)
  minimum_amount        Decimal @db.Decimal(10, 2)
  maximum_amount        Decimal @db.Decimal(10, 2)
  status                String // TODO: Implement as enum
}

model CreditTier {
  credit_tier_id   String @id @default(cuid())
  name             String
  min_credit_score Int
  max_credit_score Int
}


enum IssueStatus {
  PENDING_OUTCOME
  RESOLVED
}

model Issue {
  issue_id    String @id @default(cuid())
  title       String
  description String 
  outcome     String?
  status      IssueStatus
  images      Bytes[] @db.ByteA
  create_time DateTime @default(now())
  updated_at  DateTime @updatedAt

  merchant_id String?  // Optional foreign key to Merchant
  customer_id String?  // Optional foreign key to Customer
  admin_id    String?  // Optional foreign key to Admin

  // Relations
  merchant    Merchant? @relation(fields: [merchant_id], references: [merchant_id])
  customer    Customer? @relation(fields: [customer_id], references: [customer_id])
  admin       Admin? @relation(fields: [admin_id], references: [admin_id])
}


// Voucher Management Module
model Voucher {
  voucher_id          String            @id @default(cuid())
  title               String
  description         String
  percentage_discount Float
  amount_discount     Float
  expiry_date         DateTime
  terms               String

  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relationships
  admin               Admin             @relation(fields: [created_by_admin], references: [admin_id])
  created_by_admin    String
  vouchersAssigned    VoucherAssigned[] 
}

enum VoucherStatus {
  AVAILABLE
  EXPIRED
  USED
  UNAVAILABLE
}

model VoucherAssigned {
  voucher_assigned_id         String          @id @default(cuid())
  status                      VoucherStatus
  date_time_issued            DateTime        @default(now())

  // Relationships
  voucher                     Voucher         @relation(fields: [voucher_id], references: [voucher_id], onDelete: Cascade)
  voucher_id                  String
  customer                    Customer        @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
  customer_id                 String

  used_installment_payment_id String? // TODO: Associate with installment plan
}
