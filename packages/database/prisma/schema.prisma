// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING_EMAIL_VERIFICATION
  PENDING_PHONE_VERIFICATION
  ACTIVE
  SUSPENDED
}

model Customer {
  customer_id     String   @id @default(cuid())
  name            String
  profile_picture Bytes    @db.ByteA
  email           String   @unique
  password        String
  contact_number  String
  address         String
  date_of_birth   DateTime
  status          Status
  wallet_balance  Float    @default(0)
  credit_score    Int      @default(0)

  // Relationships
  emailVerificationTokens EmailVerificationToken[]
  otps                    Otp[]
  passwordResetTokens     PasswordResetToken[]

  cashbackWallets         CashbackWallet[]
  issues                  Issue[]
  vouchersAssigned        VoucherAssigned[]
  transactions            Transaction[]
  paymentHistories        PaymentHistory[]
  notifications           Notification[]
}

// Utility Schemas
// Customer Sign Up Use Case: Store email verification tokens
model EmailVerificationToken {
  id    String @id @default(cuid())
  email String
  token String @unique

  expiresAt DateTime @default(now())
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer    Customer @relation(fields: [customer_id], references: [customer_id])
  customer_id String

  @@index([customer_id])
}

// Customer Sign Up Use Case: Store phone number OTPs
model Otp {
  id             String @id @default(cuid())
  contact_number String
  otp            String @unique

  expiresAt DateTime @default(now())
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer    Customer @relation(fields: [customer_id], references: [customer_id])
  customer_id String

  @@index([customer_id])
}

// Customer Logout Use Case: JWT Blacklisting
model TokenBlackList {
  id    String @id @default(cuid())
  token String @unique

  expiresAt DateTime
  createdAt DateTime @default(now())
}

// Customer Forget Password Use Case: Store PasswordResetTokens
model PasswordResetToken {
  id    String @id @default(cuid())
  email String
  token String @unique

  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer    Customer @relation(fields: [customer_id], references: [customer_id])
  customer_id String

  @@index([customer_id])
}

enum AdminType {
  SUPER
  NORMAL
  DEACTIVATED
  UNVERIFIED
}

model Admin {
  admin_id        String    @id @default(cuid())
  name            String
  profile_picture Bytes?    @db.ByteA
  email           String    @unique
  username        String    @unique
  password        String
  contact_number  String
  address         String
  date_of_birth   DateTime
  admin_type      AdminType // TODO: Implement as enum
  issues          Issue[]
  vouchersCreated Voucher[]
  notifications   Notification[]
}

model Merchant {
  merchant_id             String                           @id @default(cuid())
  name                    String
  email                   String                           @unique
  password                String
  contact_number          String
  address                 String
  qr_code                 String
  status                  Status
  profile_picture         Bytes?                           @db.ByteA
  cashback                Float
  wallet_balance          Float                            @default(0)

  // Relationships
  emailVerificationTokens MerchantEmailVerificationToken[]
  cashbackWallets         CashbackWallet[]
  issues                  Issue[]
  Transaction             Transaction[]
  notifications           Notification[]
  merchantPayments        MerchantPayment[]
}

// Merchant Sign Up Use Case: Store phone number OTPs
model MerchantOtp {
  id             String @id @default(cuid())
  contact_number String
  otp            String @unique

  expiresAt DateTime @default(now())
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Merchant Sign Up Use Case: Store email verification tokens
model MerchantEmailVerificationToken {
  id    String @id @default(cuid())
  email String
  token String

  expiresAt DateTime @default(now())
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  merchant    Merchant @relation(fields: [merchant_id], references: [merchant_id])
  merchant_id String

  @@unique([email, token])
  @@index([merchant_id])
}

enum IssueStatus {
  PENDING_OUTCOME
  RESOLVED
  CANCELLED
}

enum IssueCategory {
  ACCOUNT
  TRANSACTION
  OTHERS
}

model Issue {
  issue_id    String        @id @default(cuid())
  title       String
  description String
  category    IssueCategory
  outcome     String?
  status      IssueStatus
  images      Bytes[]       @db.ByteA
  create_time DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  merchant_id    String? // Optional foreign key to Merchant
  customer_id    String? // Optional foreign key to Customer
  admin_id       String? // Optional foreign key to Admin
  transaction_id String? // Optional foreign key to Transaction

  // Relations
  merchant    Merchant?    @relation(fields: [merchant_id], references: [merchant_id])
  customer    Customer?    @relation(fields: [customer_id], references: [customer_id])
  admin       Admin?       @relation(fields: [admin_id], references: [admin_id])
  transaction Transaction? @relation(fields: [transaction_id], references: [transaction_id])
  notifications    Notification[]
}

// Payments, Wallet and Terms Management Module
model CreditTier {
  credit_tier_id   String @id @default(cuid())
  name             String @unique
  min_credit_score Int
  max_credit_score Int

  instalment_plans InstalmentPlan[]
}

model WithdrawalFeeRate {
  withdrawal_fee_rate_id      String             @id @default(cuid())
  name                        String
  wallet_balance_max          Float
  wallet_balance_min          Float         
  monthly_revenue_max         Float
  monthly_revenue_min         Float    
  percentage_withdrawal_fee   Float
  percentage_transaction_fee  Float
}

enum PaymentStatus {
  PAID
  PENDING_PAYMENT
}

model MerchantPayment {
  merchant_payment_id         String        @id @default(cuid())
  from_bank                   String?
  to_merchant_bank_account_no String
  evidence                    Bytes?        @db.ByteA
  status                      PaymentStatus
  created_at                  DateTime      @default(now())

  total_amount_from_transactions Float
  transaction_fee_percentage     Float
  transaction_fees               Float
  withdrawal_fee_percentage      Float
  withdrawal_fee                 Float
  final_payment_amount           Float

  merchant_id String
  merchant    Merchant @relation(fields: [merchant_id], references: [merchant_id])
}

enum TransactionStatus {
  FULLY_PAID
  IN_PROGRESS
}

model Transaction {
  transaction_id      String            @id @default(cuid())
  amount              Float
  date_of_transaction DateTime
  status              TransactionStatus
  fully_paid_date     DateTime?
  reference_no        String            @default("")
  cashback_percentage Float             @default(0)

  // Relationships
  customer_id String
  customer    Customer @relation(fields: [customer_id], references: [customer_id])

  merchant_id String
  merchant    Merchant @relation(fields: [merchant_id], references: [merchant_id])

  instalment_plan_id String
  instalment_plan    InstalmentPlan @relation(fields: [instalment_plan_id], references: [instalment_plan_id])

  merchant_payment_id String?

  issues Issue[]

  instalment_payments InstalmentPayment[]

  notifications    Notification[]
}

model InstalmentPlan {
  instalment_plan_id    String @id @default(cuid())
  name                  String
  description           String
  number_of_instalments Int
  time_period           Int // in weeks
  interest_rate         Float
  minimum_amount        Float
  maximum_amount        Float
  status                String // active/inactive

  credit_tiers CreditTier[]
  transactions Transaction[]
}

enum InstalmentPaymentStatus {
  PAID
  UNPAID
}

model InstalmentPayment {
  instalment_payment_id   String                  @id @default(cuid())
  amount_due              Float
  late_payment_amount_due Float
  status                  InstalmentPaymentStatus
  due_date                DateTime
  paid_date               DateTime?
  instalment_number       Int // depends on frequency of instalment plan

  amount_deducted_from_wallet Float?
  amount_discount_from_voucher    Float?
  amount_deducted_from_cashback_wallet Float?

  // Relationships
  transaction_id String
  transaction    Transaction @relation(fields: [transaction_id], references: [transaction_id])

  voucher_assigned_id             String?            @unique
  voucher_assigned                VoucherAssigned?   @relation(fields: [voucher_assigned_id], references: [voucher_assigned_id])
  
  cashback_wallet_id              String?            @unique
  cashback_wallet                 CashbackWallet?    @relation(fields: [cashback_wallet_id], references: [cashback_wallet_id])
}

enum PaymentType {
  TOP_UP
  INSTALMENT_PAYMENT
  REFUND
  OTHER
}

model PaymentHistory {
  payment_history_id   String             @id @default(cuid())
  amount               Float
  payment_date         DateTime           @default(now())
  payment_type         PaymentType

  // Relationships
  customer_id          String
  customer             Customer           @relation(fields: [customer_id], references: [customer_id])
}

model CashbackWallet {
  cashback_wallet_id   String            @id @default(cuid())
  wallet_balance       Float             @default(0)

  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt

  // Relationships
  customer_id          String            @unique
  customer             Customer          @relation(fields: [customer_id], references: [customer_id])
  merchant_id          String            @unique
  merchant             Merchant          @relation(fields: [merchant_id], references: [merchant_id])
  instalment_payments  InstalmentPayment[]

  // TODO: Add cashback wallet history
}

// Voucher Management Module
model Voucher {
  voucher_id          String            @id @default(cuid())
  title               String
  description         String
  percentage_discount Float
  amount_discount     Float
  expiry_date         DateTime
  terms               String
  usage_limit         Int
  is_active           Boolean           @default(true)

  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  // Relationships
  admin               Admin             @relation(fields: [created_by_admin], references: [admin_id])
  created_by_admin    String
  vouchersAssigned    VoucherAssigned[]
}

enum VoucherAssignedStatus {
  AVAILABLE
  EXPIRED
  USED
  UNAVAILABLE
}

model VoucherAssigned {
  voucher_assigned_id    String             @id @default(cuid())
  status                 VoucherAssignedStatus
  remaining_uses         Int
  date_time_issued       DateTime           @default(now())

  // Relationships
  voucher                Voucher            @relation(fields: [voucher_id], references: [voucher_id], onDelete: Cascade)
  voucher_id             String
  customer               Customer           @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade)
  customer_id            String
  instalment_payment     InstalmentPayment? 
  instalment_payment_id  String?
}

//Notifications
enum NotificationPriority {
  HIGH
  LOW
}

model Notification {
  notification_id    String      @id @default(cuid())
  title       String
  description String
  create_time DateTime    @default(now())
  priority    NotificationPriority

  merchant_id    String? // Optional foreign key to Merchant
  customer_id    String? // Optional foreign key to Customer
  admin_id       String? // Optional foreign key to Admin
  transaction_id String? // Optional foreign key to Transaction
  issue_id       String? // Optional foreign key to Issue

  // Relations
  merchant    Merchant?    @relation(fields: [merchant_id], references: [merchant_id])
  customer    Customer?    @relation(fields: [customer_id], references: [customer_id])
  admin       Admin?       @relation(fields: [admin_id], references: [admin_id])
  transaction Transaction? @relation(fields: [transaction_id], references: [transaction_id])
  issues      Issue?       @relation(fields: [issue_id], references: [issue_id])
}
