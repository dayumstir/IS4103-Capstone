// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING_EMAIL_VERIFICATION
  PENDING_PHONE_VERIFICATION
  ACTIVE
  SUSPENDED
}

model Customer {
  customer_id     String   @id @default(cuid())
  name            String
  profile_picture String
  email           String   @unique
  password        String
  contact_number  String   @unique
  address         String
  date_of_birth   DateTime
  status          Status
  credit_score    Int
  credit_tier_id  String

  // Relationships
  emailVerificationTokens EmailVerificationToken[]
  otps                    Otp[]
  passwordResetTokens     PasswordResetToken[]
}

// Utility Schemas
// Customer Sign Up Use Case: Store email verification tokens
model EmailVerificationToken {
  id    String @id @default(cuid())
  email String
  token String @unique

  expiresAt DateTime @default(now())
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 1 Customer to Many EmailVerificationTokens
  customer    Customer @relation(fields: [customer_id], references: [customer_id])
  customer_id String

  @@index([customer_id])
}

// Customer Sign Up Use Case: Store phone number OTPs
model Otp {
  id             String @id @default(cuid())
  contact_number String
  otp            String @unique

  expiresAt DateTime @default(now())
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer    Customer @relation(fields: [customer_id], references: [customer_id])
  customer_id String

  @@index([customer_id])
}

// Customer Logout Use Case: JWT Blacklisting
model TokenBlackList {
  id    String @id @default(cuid())
  token String @unique

  expiresAt DateTime
  createdAt DateTime @default(now())
}

// Customer Forget Password Use Case: Store PasswordResetTokens
model PasswordResetToken {
  id    String @id @default(cuid())
  email String
  token String @unique

  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer    Customer @relation(fields: [customer_id], references: [customer_id])
  customer_id String

  @@index([customer_id])
}

enum AdminType {
  SUPER
  NORMAL
}

model Admin {
  admin_id        String @id @default(cuid())
  name            String
  profile_picture Bytes? @db.ByteA
  email          String    @unique
  username       String    @unique
  password       String
  contact_number String
  address        String
  date_of_birth  DateTime
  admin_type     AdminType // TODO: Implement as enum
}

model Merchant {
  merchant_id     String @id @default(cuid())
  name            String
  email           String @unique
  password        String
  contact_number  String
  address         String
  qr_code         String
  status          Status
  profile_picture Bytes? @db.ByteA
}

model Transaction {
  transaction_id      String   @id @default(cuid())
  amount              Decimal  @db.Decimal(10, 2)
  date                DateTime
  status              String
  customer_id         String
  merchant_id         String
  merchant_payment_id String
  installment_plan_id String
}

model InstalmentPlan {
  instalment_plan_id String  @id @default(cuid())
  name               String
  description        String
  frequency          String // TODO: Implement as enum?
  interest_rate      Decimal @db.Decimal(5, 2)
  minimum_amount     Decimal @db.Decimal(10, 2)
  maximum_amount     Decimal @db.Decimal(10, 2)
  status             String // TODO: Implement as enum
}

model CreditTier {
  credit_tier_id   String @id @default(cuid())
  name             String
  min_credit_score Int
  max_credit_score Int
}
